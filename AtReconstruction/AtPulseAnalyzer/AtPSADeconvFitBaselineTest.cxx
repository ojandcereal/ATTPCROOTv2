#include "AtPSADeconvFitBaseline.h"

#include "AtPSATestFixture.h"

#include <FairParAsciiFileIo.h>
#include <FairRuntimeDb.h>

#include <gtest/gtest.h>
#include <vector>

class AtPSADeconvFitBaselineTestFixture : public AtPSATestFixture {

protected:
   std::unique_ptr<AtPSADeconvFitBaseline> fit;
   AtPad::trace chargeData; // Assuming AtPad::trace is a vector or similar

   virtual void SetUp() override
   {
      AtPSATestFixture::SetUp();

      // Set any AtDigiPar parameters here if needed
      fPar->fDriftVelocity = 0.815; // As an example. This is the default value for e12014.

      chargeData = {
         0.885968,   2.1525,    0.951476,  -0.278465, -0.478776,   -0.140824, 0.071717,  -0.263744,  -0.559598,
         0.00271817, 0.678995,  0.425455,  -0.529636, -0.944227,   -0.53787,  0.265913,  0.561955,   -0.125684,
         -1.09509,   -1.04279,  -0.173774, 0.36576,   -0.00810279, -0.583041, -0.586018, -0.241434,  0.460796,
         1.04775,    1.02122,   0.497862,  -0.192708, -0.539071,   -0.651428, -0.522705, -0.0127283, 0.426339,
         0.499248,   0.593063,  0.746177,  0.60199,   -0.146074,   -0.755497, -0.535806, 0.230041,   0.944424,
         1.29357,    1.03019,   0.670217,  0.580629,  0.471777,    0.397956,  0.19101,   0.0285577,  0.377418,
         0.998987,   1.44945,   1.29952,   0.663976,  0.312004,    0.425882,  1.06767,   1.52093,    1.43516,
         1.50585,    1.32376,   0.696393,  0.135994,  -0.0245355,  0.123767,  0.510688,  1.27152,    2.05662,
         2.05713,    1.15656,   0.286996,  0.348441,  1.02195,     1.08767,   0.656867,  0.865102,   1.4698,
         1.6219,     1.50647,   0.923013,  0.0333792, -0.490474,   -0.333612, 0.490878,  1.55624,    2.19721,
         1.91057,    1.57704,   2.01476,   2.29116,   1.93805,     1.43223,   1.09283,   1.03849,    0.918461,
         0.587715,   0.0944289, 0.246696,  0.900173,  1.36888,     1.77042,   1.99218,   1.80237,    1.07215,
         0.534557,   0.912722,  1.74828,   2.3642,    2.67697,     2.97064,   3.1498,    2.56773,    1.5812,
         1.11023,    1.32207,   1.58867,   1.15804,   0.79177,     1.43093,   2.33456,   2.4403,     1.99652,
         1.89748,    2.33543,   2.46088,   2.03917,   1.56431,     1.20879,   0.716614,  0.288001,   0.383045,
         0.880928,   1.43302,   2.10358,   2.69358,   2.33764,     1.28455,   0.651891,  1.15563,    2.34286,
         3.04363,    2.92973,   2.25962,   1.68736,   1.74968,     1.91936,   2.22967,   2.9454,     3.1903,
         2.975,      2.96736,   3.2639,    3.33004,   3.30052,     3.27109,   3.00662,   2.72756,    3.04504,
         3.77543,    4.04089,   3.86265,   3.77248,   3.82952,     3.93724,   3.87919,   3.54143,    3.28694,
         4.36157,    6.66165,   8.79517,   9.97939,   10.7845,     13.065,    17.4164,   22.6931,    28.1219,
         34.4625,    42.2686,   50.965,    58.4795,   63.0951,     65.1345,   65.4339,   63.9744,    60.2489,
         53.8752,    45.6628,   37.1686,   30.4763,   26.0376,     21.9474,   17.4743,   13.7859,    11.3453,
         9.49632,    7.78558,   6.17817,   5.6505,    6.29239,     6.0685,    4.25128,   2.51747,    2.09257,
         2.74118,    3.68492,   4.44536,   4.57083,   3.92637,     3.02677,   2.79289,   3.60777,    4.48753,
         4.32379,    4.2926,    5.15484,   5.5123,    4.7353,      3.71314,   3.52799,   4.06731,    4.69538,
         5.36696,    5.5715,    5.1158,    4.54205,   4.81737,     5.42833,   5.31183,   4.57455,    3.60961,
         2.7436,     2.85039,   3.68254,   4.06903,   4.03254,     4.2518,    4.49196,   3.78947,    2.92562,
         3.13294,    3.81387,   3.81824,   3.29106,   3.036,       3.36469,   4.01224,   4.2384,     3.96461,
         3.32827,    3.15518,   3.66584,   3.85878,   3.6086,      3.58502,   4.03122,   4.67018,    4.83455,
         4.29327,    3.08764,   2.1303,    2.62848,   4.20347,     5.13334,   4.55435,   3.14229,    2.32211,
         3.00061,    3.77352,   3.52122,   2.94987,   2.96437,     3.46725,   3.59906,   3.20451,    2.75732,
         2.63576,    2.77933,   3.37788,   3.79059,   3.21019,     2.65791,   2.57561,   2.89193,    3.31374,
         3.58693,    3.7997,    3.99248,   3.84795,   3.10656,     2.12206,   1.68651,   2.57886,    4.09828,
         4.80555,    4.52292,   4.05575,   3.39949,   2.91059,     3.05972,   3.10941,   3.15412,    3.59129,
         3.93055,    3.72271,   3.67198,   3.66443,   3.35747,     2.93486,   2.82885,   3.0156,     3.40047,
         3.84671,    3.76067,   3.27145,   2.65629,   2.22466,     2.39063,   3.12644,   3.60224,    3.4233,
         2.96452,    2.68748,   3.40774,   4.49422,   4.03466,     2.26679,   1.44132,   2.14382,    3.32228,
         3.49123,    2.44395,   1.58755,   2.0138,    3.02412,     3.1829,    2.68661,   2.27158,    1.71337,
         1.60358,    2.21042,   3.02812,   3.3285,    3.36972,     3.43399,   2.98254,   2.18358,    1.56231,
         1.4115,     1.91159,   2.62982,   2.58495,   2.18472,     2.33995,   2.82983,   3.08216,    3.06316,
         3.37512,    3.62981,   2.93279,   2.03083,   1.95829,     2.39537,   2.48968,   2.11625,    1.85468,
         2.22626,    3.2092,    4.12312,   3.6513,    2.26405,     1.7935,    2.69423,   3.6443,     3.58434,
         2.76457,    2.57933,   3.31069,   3.72002,   2.7528,      1.16135,   0.885304,  2.16166,    3.49148,
         3.52899,    2.79221,   2.38414,   2.53435,   3.04802,     2.89228,   1.86286,   1.47134,    2.32079,
         3.23388,    3.61634,   3.33855,   2.7332,    2.31702,     2.0737,    1.74303,   1.65551,    1.88326,
         2.09163,    2.06957,   2.15654,   2.47841,   2.55223,     2.22096,   2.12487,   2.46858,    2.64917,
         2.38285,    2.18192,   2.24918,   2.48267,   2.8377,      3.18254,   2.97111,   2.40261,    2.23667,
         2.48231,    2.60738,   2.26485,   1.6437,    1.63241,     2.3902,    2.9237,    2.394,      1.41585,
         1.52657,    2.53044,   2.88901,   2.23609,   1.57129,     1.56705,   1.86271,   2.04305,    2.2306,
         2.09447,    2.30188,   3.10406,   3.61324,   2.9619,      1.72176,   1.38291,   1.86616,    2.48955,
         2.75011,    2.281,     1.78172,   1.73523,   1.76725,     1.55799,   1.4793,    1.88392,    2.51257,
         2.60756,    1.98775,   1.62682,   2.17967,   3.03058,     2.87588,   1.83048,   1.31648,    2.06502,
         3.1696,     3.07541,   1.56427,   0.376047,  0.684787,    2.14367,   3.24627,   2.91711,    2.20593,
         2.48028,    2.98888,   2.68363,   1.84927,   1.70618,     2.48927,   3.57027,   4.10025,    3.19286,
         1.5168,     0.39403,   0.257607,  0.910806,  2.15177,     3.25749,   3.91961,   3.49962,    2.03446,
         0.564359,   0.245047,  1.52896,   2.76349,   2.81462,     2.27367,   1.93876,   1.97068,    2.12077,
         2.20179,    2.29501,   3.00539,   4.27795,   3.65269,     -0.126626, -4.097,    -3.30862};
      // pad 8590
      //  Create the object to test and setup any parameters
      fit = std::make_unique<AtPSADeconvFitBaseline>();
      fit->Init(fPar.get());
   }
};

TEST_F(AtPSADeconvFitBaselineTestFixture, GetZandQ)
{
   // Call the getZandQ function with the chargeData
   AtPSADeconv::HitData result = fit->getZandQ(chargeData);

   // Add assertions to check the result
   // Replace these with actual expectations based on the function's behavior
   EXPECT_TRUE(result[0].z > 0); // Assuming HitData has a 'z' attribute
   EXPECT_TRUE(result[0].q > 0); // Assuming HitData has a 'q' attribute
}
